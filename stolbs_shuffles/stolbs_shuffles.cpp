#include <iostream>
#include <vector>
#include <fstream>
#include <ctime>

using namespace std;

// Функция проверки на ввод целого неотрицательного числа
int dataCheckInt(int integer) {
    // Пока ввод некорректен (не число или отрицательное)
    while (cin.fail() || integer < 0) {
        cin.clear(); // Очищаем состояние потока
        cin.ignore(1000, '\n'); // Удаляем лишние символы из буфера
        cout << "Ошибка, вы должны ввести целое неотрицательное число." << endl << "Введите число ещё раз: " << endl;
        cin >> integer; // Повторный ввод
    }
    return integer; // Возвращаем проверенное значение
}

// Функция для генерации случайного числа от 1 до max
int randFunction(int max) {
    int x = rand() % (max)+1; // Генерация случайного числа
    return x; // Возвращаем результат
}

int main()
{
    srand(time(0)); // Инициализация генератора случайных чисел
    setlocale(LC_ALL, "RU"); // Устанавливаем локализацию на русский язык
    cout << "Введите размерность матрицы:" << endl;
    int n = 0;
    cin >> n; // Ввод размерности матрицы
    n = dataCheckInt(n); // Проверка корректности ввода

    cout << "Введите максимальное число для матрицы (рекомендуем не больше 10 000): " << endl;
    int maxNum = 10000;
    cin >> maxNum; // Ввод максимального числа для матрицы
    maxNum = dataCheckInt(maxNum); // Проверка корректности ввода

    vector<vector<int>> matrix; // Исходная матрица

    // Заполнение матрицы случайными числами
    for (int i = 0; i < n; i++) {
        vector<int> row; // Строка матрицы
        for (int j = 0; j < n; j++) {
            row.push_back(randFunction(maxNum)); // Добавляем случайное число в строку
        }
        matrix.push_back(row); // Добавляем строку в матрицу
    }

    // Вывод матрицы до перестановки
    cout << "Матрица до перетасовки: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " "; // Вывод элементов строки
        }
        cout << endl; // Переход на новую строку
    }

    vector<vector<int>> newMatrix; // Новая матрица после перестановки

    // Инициализация новой матрицы нулями
    for (int i = 0; i < n; i++) {
        vector<int> row(n, 0); // Создаем строку из n нулей
        newMatrix.push_back(row); // Добавляем строку в новую матрицу
    }

    // Перестановка элементов: левая часть строки (чётные индексы)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j += 2) {
            newMatrix[i][j] = matrix[i][j / 2]; // Копируем элементы из первой половины строки
        }
    }

    // Перестановка элементов: правая часть строки (нечётные индексы)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((j * 2 + 1) < n) {
                newMatrix[i][j * 2 + 1] = matrix[i][n - j - 1]; // Копируем элементы из второй половины строки
            }
        }
    }

    // Вывод матрицы после перестановки
    cout << "Матрица после: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << newMatrix[i][j] << " "; // Вывод элементов строки
        }
        cout << endl; // Переход на новую строку
    }

    return 0; // Завершение программы
}